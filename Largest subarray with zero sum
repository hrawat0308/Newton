Problem Statement
Given an array A[], of length N containing values in the range of negative to positive integers. You need to find the length of the largest subarray whose sum of elements is 0.


Input
The first line contains N denoting the size of the array A. Then in the next line contains N space-separated values of the array A.

Constraints:-
1 <= N <= 1e5
-1e6 <= A[i] <= 1e6


Output
Print the length of the largest subarray which has sum 0, If no subarray exist print -1.











import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
        Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        int[] arr = new int[N];
        for(int i=0;i<N;i++){
            arr[i] = sc.nextInt();
        }

        int res = largestSubArray(arr,N);
        System.out.println(res);
	}

    public static int largestSubArray(int[] arr, int N){
        HashMap<Integer,Integer> map = new HashMap<>();
        int sum = 0;
        int maxlength = 0;
        map.put(sum,-1);
        for(int i=0; i<N; i++){
            sum += arr[i];
            if(!map.containsKey(sum)){
                map.put(sum,i);
            }
            else{
                int length = i - map.get(sum);
                if(maxlength<length){
                    maxlength = length; 
                }
            }
        }
        if(maxlength > 0){
            return maxlength;
        }
        else{
            return -1;
        }
    
    }
}
