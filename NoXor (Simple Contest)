Problem Statement
We need a problem on xor again. Given an array A of N integers (1- indexed), you need to find the sum of (N- i) xor A[i] for all i from 1 to N.

Input
The first line of the input contains an integer N, the number of elements of the array.
The second line of the input contains N singly spaced integers of the array A[i].

Constraints
1 <= N <= 100000
1 <= A[i] <= 109

Output
Output a single integer, the answer to the problem.



import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
                      // Your code here
		Scanner sc = new Scanner(System.in);
        int N = sc.nextInt();
        long sum = 0;
        long[] arr = new long[N];
        for(int i = 0; i<N ; i++){
            arr[i] = sc.nextInt();
        }
        for(int i = N-1; i>=0 ; i--){
           sum = sum + (i^(arr[N-i-1]));
        }
        System.out.println(sum);
	}
}
