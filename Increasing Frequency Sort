Problem Statement
Given an array of integers nums, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.


Input
The first line of the input contains n ( length of num )
The second line contains the array num.

Constraints
1 <= nums. length <= 100
-100 <= nums[i] <= 100


Output
Print the sorted array






import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework


// don't change the name of this class
// you can add inner classes if needed
class Main {
	// public static void main (String[] args) {
    //     Scanner sc = new Scanner(System.in);
    //     int N = sc.nextInt();
    //     int[] arr = new int[N];
    //     for(int i=0;i<N;i++){   
    //         arr[i] = sc.nextInt();
    //     }
    //     frequencySort(arr,N);
	// }

    // public static void frequencySort(int[] arr,int N){
    //     HashMap<Integer,Integer> map = new HashMap<>(); //digit->frequency
    //     for(int i=0;i<N;i++){
    //         if(!map.containsKey(arr[i])){
    //             map.put(arr[i],1);
    //         }
    //         else{
    //             // System.out.println(map.get(arr[i]));
    //             map.put(arr[i],map.get(arr[i])+1);
    //         }
    //     }

    //     int index =0;
    //     int max = 0;
    //     for(HashMap.Entry<Integer,Integer> entry: map.entrySet()){
    //         int count =  entry.getValue();
    //         while(count>0){
    //             arr[index] = entry.getKey();
    //             index++;
    //             count--;
    //         }
    //         // System.out.println("Key "+entry.getKey()+" , Value "+ entry.getValue());               
    //     }

    //     for(int a : arr){
    //         System.out.print(a+" ");
    //     }
        
    //     System.out.println(map);
    // }

    public static void main (String[] args) {
        // Your code here
        Scanner sc = new Scanner(System.in);

        int n = sc.nextInt();
        Integer[] arr = new Integer[n];

        for(int i = 0; i < n; i++)
            arr[i] = sc.nextInt();

        Map<Integer, Integer> map = new TreeMap<>();

        for(int i = 0; i < n; i++)
        {
            if(map.containsKey(arr[i]))
                map.put(arr[i], map.get(arr[i]) + 1);
            else
                map.put(arr[i], 1);
        }

        Arrays.sort(arr, new Comparator<Integer>() {
            @Override
            public int compare(Integer a, Integer b) {
                if(map.get(a) == map.get(b)) {
                    return b - a;
                }
                return map.get(a) - map.get(b);
            }
        });
        
        for(int i : arr)
        {
        	System.out.print(i + " ");
        }
	}
}
