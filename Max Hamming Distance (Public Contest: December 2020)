Problem Statement
Given a string S. Find a string R which is an anagram of S and the hamming distance between S and R is maximum.
An anagram of a string is another string that contains the same characters, only the order of characters can be different.
Hamming distance between two strings of equal length is the number of positions at which the corresponding character is different.


Input
The first and the only line of input contains a single string S.

Constraints:
1 <= |S| <= 100000
S contains only lowercase letters of the English alphabet.


Output
Print the maximum hamming distance between S and R.





import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
public static void main (String[] args) {
                      // Your code here
		int max=Integer.MIN_VALUE;
		HashMap<Character,Integer> hm=new HashMap<>();
		Scanner scan=new Scanner(System.in);
		String str=scan.next();
		for (int i=0;i<str.length();i++){
               char ch=str.charAt(i);
			   if (hm.containsKey(ch)){
				   int n=hm.get(ch);
				   hm.put(ch,n+1);
				   if (n+1>max)
				   max=n+1;
			   }
			   else 
			   hm.put(ch,1);
		}
		if (max<=(str.length()/2))
		System.out.println(str.length());
		else
		System.out.println(2*(str.length()-max));
	}
}
