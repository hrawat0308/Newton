Problem Statement
Given an array of integers of size N, your task is to find the maximum parity index of this array.
Parity Index is the maximum difference between two indices i and j (1 <= i <= j <= N) of an array A such that Ai < Aj.


Input
First line of contains a single integer N, next line contains N space separated integers depicting the values of array.

Constraints:-
1 < = N < = 100000
1 < = Arr[i] < = 100000


Output
Print the maximum value of j- i under the given condition, if no pair satisfies the condition print -1.












import java.io.*; // for handling input/output
import java.util.*; // contains Collections framework

// don't change the name of this class
// you can add inner classes if needed
class Main {
	public static void main (String[] args) {
       Scanner sc = new Scanner(System.in);
	   int N = sc.nextInt();
	   int[] arr = new int[N];
	   for(int i=0;i<N;i++){
		   arr[i] = sc.nextInt();
	   }
		int res = maxDifferenceArray(arr,N);
		System.out.println(res);
	}

	// public static int maxDifferenceArray(int[] arr, int N){
	// 	int maxDiff = -1;
		
		
	// 	int[] rightMax = new int[N];
	// 	int[] leftMin = new int[N];
	// 	leftMin[0] = arr[0];

	// 	for (int i = 1; i < N; i++){
	// 		leftMin[i] = Math.min(arr[i], leftMin[i - 1]);
	// 	}

	// 	rightMax[N - 1] = arr[N - 1];
    //     for (int j = N - 2; j >= 0; j--){
	// 		rightMax[j] = Math.max(arr[j], rightMax[j + 1]);
	// 	}
            
    //     int i = 0;
    //     int j = 0;
    //     while (j < N && i < N) {
    //         if (leftMin[i] <= rightMax[j]) {
    //             maxDiff = Math.max(maxDiff, j - i);
    //             j = j + 1;
    //         }
    //         else
    //             i = i + 1;
    //     }

		
		
	// 	// for(int i=0;i<N;i++){
	// 	// 	int j = N-1;
	// 	// 	while(i!=j && i<j){
		// // 		if(arr[j]>arr[i]){
		// 			if(maxDiff< (j-i)){
		// 				maxDiff = j-i;
		// 			}
		// 		}
	// 	// 	j--;
	// 	// 	}
	// 	// }
		
	// 	return maxDiff;
	// }



	public static int maxDifferenceArray(int arr[], int n){
	
    
        int maxDiff;
        int i, j;
 
        int RMax[] = new int[n];
        int LMin[] = new int[n];
 
        /* Construct LMin[] such that LMin[i] stores the minimum value
           from (arr[0], arr[1], ... arr[i]) */
        LMin[0] = arr[0];
        for (i = 1; i < n; ++i)
            LMin[i] = min(arr[i], LMin[i - 1]);
 
        /* Construct RMax[] such that RMax[j] stores the maximum value
           from (arr[j], arr[j+1], ..arr[n-1]) */
        RMax[n - 1] = arr[n - 1];
        for (j = n - 2; j >= 0; --j)
            RMax[j] = max(arr[j], RMax[j + 1]);
 
        /* Traverse both arrays from left to right to find optimum j - i
           This process is similar to merge() of MergeSort */
        i = 0;
        j = 0;
        maxDiff = -1;
        while (j < n && i < n) {
            if (LMin[i] <= RMax[j]) {
                maxDiff = max(maxDiff, j - i);
                j = j + 1;
            }
            else
                i = i + 1;
        }
 
		if(maxDiff == 0) return -1;
        return maxDiff;
    }

		public static int max(int x, int y)
    {
        return x > y ? x : y;
    }
 
     public static int min(int x, int y)
    {
        return x < y ? x : y;
    }
	
}
